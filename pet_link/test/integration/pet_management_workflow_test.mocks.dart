// Mocks generated by Mockito 5.4.6 from annotations
// in petfolio/test/integration/pet_management_workflow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:image_picker/image_picker.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:petfolio/features/pets/data/pets_repository.dart' as _i2;
import 'package:petfolio/features/pets/domain/pet.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [PetsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPetsRepository extends _i1.Mock implements _i2.PetsRepository {
  MockPetsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.Pet>> watchPetsForOwner(String? ownerId) =>
      (super.noSuchMethod(
            Invocation.method(#watchPetsForOwner, [ownerId]),
            returnValue: _i3.Stream<List<_i4.Pet>>.empty(),
          )
          as _i3.Stream<List<_i4.Pet>>);

  @override
  _i3.Future<void> createPet(_i4.Pet? pet) =>
      (super.noSuchMethod(
            Invocation.method(#createPet, [pet]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> updatePet(String? petId, Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
            Invocation.method(#updatePet, [petId, updates]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deletePet(String? petId) =>
      (super.noSuchMethod(
            Invocation.method(#deletePet, [petId]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> uploadPetPhoto({
    required String? ownerId,
    required String? petId,
    required _i5.XFile? file,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#uploadPetPhoto, [], {
              #ownerId: ownerId,
              #petId: petId,
              #file: file,
            }),
            returnValue: _i3.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#uploadPetPhoto, [], {
                  #ownerId: ownerId,
                  #petId: petId,
                  #file: file,
                }),
              ),
            ),
          )
          as _i3.Future<String>);
}
