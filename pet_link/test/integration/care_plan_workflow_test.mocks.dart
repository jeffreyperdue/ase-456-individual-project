// Mocks generated by Mockito 5.4.6 from annotations
// in petfolio/test/integration/care_plan_workflow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:petfolio/features/care_plans/domain/care_plan.dart' as _i4;
import 'package:petfolio/features/care_plans/domain/care_task.dart' as _i3;
import 'package:petfolio/features/care_plans/services/care_task_generator.dart'
    as _i2;
import 'package:petfolio/features/care_plans/services/clock.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CareTaskGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockCareTaskGenerator extends _i1.Mock implements _i2.CareTaskGenerator {
  MockCareTaskGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.CareTask> generateUpcomingTasks(_i4.CarePlan? carePlan) =>
      (super.noSuchMethod(
            Invocation.method(#generateUpcomingTasks, [carePlan]),
            returnValue: <_i3.CareTask>[],
          )
          as List<_i3.CareTask>);

  @override
  List<_i3.CareTask> getOverdueTasks(List<_i3.CareTask>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#getOverdueTasks, [tasks]),
            returnValue: <_i3.CareTask>[],
          )
          as List<_i3.CareTask>);

  @override
  List<_i3.CareTask> getTasksDueSoon(List<_i3.CareTask>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksDueSoon, [tasks]),
            returnValue: <_i3.CareTask>[],
          )
          as List<_i3.CareTask>);

  @override
  List<_i3.CareTask> getTodayTasks(List<_i3.CareTask>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#getTodayTasks, [tasks]),
            returnValue: <_i3.CareTask>[],
          )
          as List<_i3.CareTask>);
}

/// A class which mocks [Clock].
///
/// See the documentation for Mockito's code generation for more information.
class MockClock extends _i1.Mock implements _i5.Clock {
  MockClock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime nowUtc() =>
      (super.noSuchMethod(
            Invocation.method(#nowUtc, []),
            returnValue: _FakeDateTime_0(this, Invocation.method(#nowUtc, [])),
          )
          as DateTime);

  @override
  DateTime nowLocal() =>
      (super.noSuchMethod(
            Invocation.method(#nowLocal, []),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.method(#nowLocal, []),
            ),
          )
          as DateTime);

  @override
  DateTime todayAtTime(String? timeString) =>
      (super.noSuchMethod(
            Invocation.method(#todayAtTime, [timeString]),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.method(#todayAtTime, [timeString]),
            ),
          )
          as DateTime);

  @override
  DateTime toUtc(DateTime? localTime) =>
      (super.noSuchMethod(
            Invocation.method(#toUtc, [localTime]),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.method(#toUtc, [localTime]),
            ),
          )
          as DateTime);

  @override
  DateTime toLocal(DateTime? utcTime) =>
      (super.noSuchMethod(
            Invocation.method(#toLocal, [utcTime]),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.method(#toLocal, [utcTime]),
            ),
          )
          as DateTime);
}
